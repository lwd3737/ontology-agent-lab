// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// enums
enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  CREATED
  PAID
  FULFILLING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  REFUNDED
  FAILED
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  DELIVERED
  FAILED
}

// User & Customer
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer  Customer?
}

model Customer {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  phone     String?
  addresses Address[]

  user      User @relation(fields: [userId], references: [id])
  orders    Order[]
  reviews   Review[]
  cart      Cart?
}

model Address {
  id         String   @id @default(cuid())
  customerId String
  name       String?
  phone      String?
  postalCode String
  city       String
  street     String

  customer   Customer @relation(fields: [customerId], references: [id])
}

// Catalog
model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  parentId  String?
  parent    Category? @relation("CategoryToChildren", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToChildren")
  products  Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  
  stock       Int      @default(0)
  categoryId  String?

  category    Category? @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  orderLines  OrderLine[]
  cartLines   CartLine[]
}

// Cart
model Cart {
  id         String   @id @default(cuid())
  customerId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer   Customer @relation(fields: [customerId], references: [id])
  lines      CartLine[]
}

model CartLine {
  id       String  @id @default(cuid())
  cartId   String
  productId String
  quantity Int

  cart     Cart    @relation(fields: [cartId], references: [id])
  product  Product @relation(fields: [productId], references: [id])
}

// Order
model Order {
  id         String   @id @default(cuid())
  customerId String?
  status     OrderStatus @default(CREATED)
  subtotal   Decimal  
  shipping   Decimal   @default(0)
  total      Decimal  
  createdAt  DateTime @default(now())

  customer   Customer? @relation(fields: [customerId], references: [id])
  lines      OrderLine[]
  payment    Payment?
  shipment   Shipment?
}

model OrderLine {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Decimal  
  lineTotal Decimal  

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// Payment & Shipment
model Payment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  status    PaymentStatus @default(PENDING)
  amount    Decimal  
  provider  String?
  createdAt DateTime @default(now())

  order     Order @relation(fields: [orderId], references: [id])
}

model Shipment {
  id         String   @id @default(cuid())
  orderId    String   @unique
  status     ShipmentStatus @default(PENDING)
  trackingNo String?
  carrier    String?
  shippedAt  DateTime?

  order      Order @relation(fields: [orderId], references: [id])
}

// Review
model Review {
  id         String   @id @default(cuid())
  customerId String
  productId  String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}